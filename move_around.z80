
ClearDisplay equ 0xf7
PIOOut equ 0x7c
ApplicationReturn equ 0x348
; set caret anywhere on the screen
; b - offset, 64 (0x40) is 2nd line
; c - offset on the line
SetCaretRaw equ 0x11C
DSP_IW	equ	0x1
DSP_DW	equ	0x5
OutHex equ $047B
DisableCursor equ $0497
Wait_PS2ScanCode equ $04F8
; there are RAM mapped
STATE_KEYSTROKE equ $083E
STATE_SCANCODE equ $0842



#target bin
#code _CODE, 0x882, 0x6fe	; 0x882 is the allocated memory for application of size 0x6fe (2 bytes reserved for app size)
#code _CODE

; app entry point
	jp main

xpos defb 0
ypos defb 0

rawout:
	ld d, DSP_DW
	call PIOOut
	ret

moveup:
	ld hl, ypos
	ld a, (hl)
	or 0
	ret z
	dec (hl)
	ret

movedown:
	ld hl, ypos
	ld a, (hl)
	sub 1
	ret z
	inc (hl)
	ret

moveleft:
	ld hl, xpos
	ld a, (hl)
	or 0
	ret z
	dec (hl)
	ret

moveright:
	ld hl, xpos
	ld a, (hl)
	sub 15
	ret z
	inc (hl)
	ret
 
reset_2nd_line:
	push bc
	ld b, 64
	ld c, 0
	call SetCaretRaw
	pop bc
	ret

output_keycode:
	push bc
	push de
	push hl
#local
	; output currently pressed key code on the 2nd line of lcd
	ld b, 64
	ld c, 0
	call SetCaretRaw

	ld hl, STATE_KEYSTROKE
	; quick check if we have any keystroke chars
	ld a, (hl)
	or 0
	jp z, done
	ld b, a
	inc hl
outcode:	
	ld a, (hl)
	call OutHex
	inc hl
	djnz outcode

done:	
#endlocal
	; transform A register to d & e codes
	pop hl
	pop de
	pop bc
	ret

move:
#local
	ld a, (STATE_KEYSTROKE + 1)

	push af
	sub 6bh
	call z, moveleft
	pop af

	push af
	sub 74h
	call z, moveright
	pop af

	push af
	sub 75h
	call z, moveup
	pop af

	push af
	sub 72h
	call z, movedown
	pop af

#endlocal
	ret

reset_pos:
	push hl
	ld hl, xpos
	ld (hl), 0
	ld hl, ypos
	ld (hl), 0
	pop hl
	ret

draw_player:
	push bc
	push hl
	push de
#local
	ld a, (ypos)
	ld b, a
	ld a, 0
moverow:
	add a, 64
	djnz moverow
	ld b, a
	
	ld hl, xpos
	ld c, (hl)

	call SetCaretRaw

	ld e, 0
	ld d, DSP_DW
	call PIOOut

#endlocal
	pop de
	pop hl
	pop bc
	ret

draw_player_location:
	ld b, 64
	ld c, 11
	call SetCaretRaw

	ld d, DSP_DW
	ld e, '['
	call PIOOut

	ld a, (xpos)
	call OutHex

	ld e, ','
	call PIOOut

	ld a, (ypos)
	call OutHex

	ld d, DSP_DW
	ld e, ']'
	call PIOOut

	ret	

main:
	ld hl, STATE_KEYSTROKE
	ld (hl), 0
	call ClearDisplay
	call reset_pos
	call DisableCursor


runloop:
	call write_player_chars_to_cgram

	call ClearDisplay

	call output_keycode

	; render
	call draw_player_location
	call draw_player

	call draw_field

	; wait for input
	; call wait_keystroke

	call Wait_PS2ScanCode
	call scancode_to_keystroke

	; move
	call move

	jp runloop

exit:
	;halt
	jp ApplicationReturn


draw_field:
	; set caret anywhere on the screen
	; b - offset, 64 (0x40) is 2nd line
	; c - offset on the line
	; call SetCaretRaw after
	; 
	; move cursor to the fields entry
	ld b, 0
	ld c, 6
	call SetCaretRaw

	ld d, DSP_DW

	ld e, 4
	call PIOOut

	ld e, 0
	call PIOOut

	ld e, 1
	call PIOOut

	ld e, 5
	call PIOOut


	; second line
	ld b, 64
	ld c, 6
	call SetCaretRaw

	ld d, DSP_DW

	ld e, 4
	call PIOOut
	ld e, 2
	call PIOOut
	ld e, 3
	call PIOOut
	ld e, 5
	call PIOOut

	ret


write_player_chars_to_cgram:
	; CGRAM address is b0000*000..b0000*111 is custom chars
	; that gives us 0x00..0x7, so 8 custom characters in CGRAM
	; d is control address
	; e is data

	; figure out the char to send

	; BRUTE FORCE PIXEL PUSH
	; Characeter top/left
	ld d, DSP_IW
	ld e, 0b01000000
	call PIOOut

	ld d, DSP_DW

	ld e, 0b00000000
	call PIOOut
	ld e, 0b00000100
	call PIOOut
	ld e, 0b00000100
	call PIOOut
	ld e, 0b00000100
	call PIOOut
	ld e, 0b00000100
	call PIOOut
	ld e, 0b00000100
	call PIOOut
	ld e, 0b00000000
	call PIOOut
	ld e, 0b00000000
	call PIOOut


	; top right
	ld d, DSP_IW
	ld e, 0b01001000
	call PIOOut

	ld d, DSP_DW

	ld e, 0b00000000
	call PIOOut
	ld e, 0b00011100
	call PIOOut
	ld e, 0b00000100
	call PIOOut
	ld e, 0b00011100
	call PIOOut
	ld e, 0b00010000
	call PIOOut
	ld e, 0b00011100
	call PIOOut
	ld e, 0b00000000
	call PIOOut
	ld e, 0b00000000
	call PIOOut


	; bottom left
	ld d, DSP_IW
	ld e, 0b01010000
	call PIOOut

	ld d, DSP_DW

	ld e, 0b00000000
	call PIOOut
	ld e, 0b00011100
	call PIOOut
	ld e, 0b00000100
	call PIOOut
	ld e, 0b00011100
	call PIOOut
	ld e, 0b00000100
	call PIOOut
	ld e, 0b00011100
	call PIOOut
	ld e, 0b00000000
	call PIOOut
	ld e, 0b00000000
	call PIOOut

	; bottom right
	ld d, DSP_IW
	ld e, 0b01011000
	call PIOOut

	ld d, DSP_DW

	ld e, 0b00000000
	call PIOOut
	ld e, 0b00010100
	call PIOOut
	ld e, 0b00010100
	call PIOOut
	ld e, 0b00011100
	call PIOOut
	ld e, 0b00000100
	call PIOOut
	ld e, 0b00000100
	call PIOOut
	ld e, 0b00000000
	call PIOOut
	ld e, 0b00000000
	call PIOOut


	; boundaries
	; left
	ld d, DSP_IW
	ld e, 0b01100000
	call PIOOut

	ld d, DSP_DW

	ld e, 0b00000001
	call PIOOut
	ld e, 0b00000001
	call PIOOut
	ld e, 0b00000001
	call PIOOut
	ld e, 0b00000001
	call PIOOut
	ld e, 0b00000001
	call PIOOut
	ld e, 0b00000001
	call PIOOut
	ld e, 0b00000001
	call PIOOut
	ld e, 0b00000001
	call PIOOut

	; right
	ld d, DSP_IW
	ld e, 0b01101000
	call PIOOut

	ld d, DSP_DW
	ld e, 0b00010000
	call PIOOut
	ld e, 0b00010000
	call PIOOut
	ld e, 0b10010000
	call PIOOut
	ld e, 0b00010000
	call PIOOut
	ld e, 0b00010000
	call PIOOut
	ld e, 0b10110000
	call PIOOut
	ld e, 0b00010000
	call PIOOut
	ld e, 0b00010000
	call PIOOut

	; uncomment this line to mark quad characeters
	; ret



	ret


scancode_to_keystroke:
	push hl
	push de
	push bc

	; test only => copy pure scancode into keystroke
	ld de, STATE_KEYSTROKE
	ld hl, STATE_SCANCODE
	ld b, 0
	ld c, 4
	ldir

	pop bc
	pop de
	pop hl
	ret

