
;longwait equ 0x10
wait equ 0x6E
exwait equ $007B
longwait equ 0x85
drawchar equ 0x8F
cleardisplay equ 0x10a
raw_textout equ 0xe4
app_ret equ 0x35b
; loads serial input into E register
wait_serial equ 0x484
pioout equ $008F
DSP_IW equ 0b00000001
; set carret anywhere on the screen
; b - offset, 64 (0x40) is 2nd line
; c - offset on the line
set_carret_raw equ 0x12F
DSP_DW	equ	0b00000101
OutHex equ $04BC
disablecursor equ $04D8
wait_ps2_scancode equ $0539
; there are RAM mapped
keystroke equ $083E
scancode equ $0842



#target bin
#code _CODE, 0x882, 0x6fe	; 0x882 is the allocated memory for application of size 0x6fe (2 bytes reserved for app size)
#code _CODE

; app entry point
	jp main

xpos defb 0
ypos defb 0

rawout:
	ld d, DSP_DW
	call pioout
	ret

moveup:
	ld hl, ypos
	ld a, (hl)
	or 0
	ret z
	dec (hl)
	ret

movedown:
	ld hl, ypos
	ld a, (hl)
	sub 1
	ret z
	inc (hl)
	ret

moveleft:
	ld hl, xpos
	ld a, (hl)
	or 0
	ret z
	dec (hl)
	ret

moveright:
	ld hl, xpos
	ld a, (hl)
	sub 15
	ret z
	inc (hl)
	ret
 
reset_2nd_line:
	push bc
	ld b, 64
	ld c, 0
	call set_carret_raw
	pop bc
	ret

output_keycode:
	push bc
	push de
	push hl
#local
	; output currently pressed key code on the 2nd line of lcd
	ld b, 64
	ld c, 0
	call set_carret_raw

	ld hl, keystroke
	; quick check if we have any keystroke chars
	ld a, (hl)
	or 0
	jp z, done
	ld b, a
	inc hl
outcode:	
	ld a, (hl)
	call OutHex
	inc hl
	djnz outcode

done:	
#endlocal
	; transform A register to d & e codes
	pop hl
	pop de
	pop bc
	ret

move:
#local
	ld a, (keystroke + 1)

	push af
	sub 6bh
	call z, moveleft
	pop af

	push af
	sub 74h
	call z, moveright
	pop af

	push af
	sub 75h
	call z, moveup
	pop af

	push af
	sub 72h
	call z, movedown
	pop af

#endlocal
	ret

reset_pos:
	push hl
	ld hl, xpos
	ld (hl), 0
	ld hl, ypos
	ld (hl), 0
	pop hl
	ret

draw_player:
	push bc
	push hl
	push de
#local
	ld a, (ypos)
	ld b, a
	ld a, 0
moverow:
	add a, 64
	djnz moverow
	ld b, a
	
	ld hl, xpos
	ld c, (hl)

	call set_carret_raw

	ld e, '#'
	ld d, DSP_DW
	call drawchar

#endlocal
	pop de
	pop hl
	pop bc
	ret

draw_player_location:
	ld b, 64
	ld c, 11
	call set_carret_raw

	ld d, DSP_DW
	ld e, '['
	call drawchar

	ld a, (xpos)
	call OutHex

	ld e, ','
	call drawchar

	ld a, (ypos)
	call OutHex

	ld d, DSP_DW
	ld e, ']'
	call drawchar

	ret	

main:
	call cleardisplay
	call reset_pos
	call disablecursor


runloop:
	call cleardisplay

	call output_keycode

	; render
	call draw_player_location
	call draw_player

	; wait for input
	; call wait_keystroke

	call wait_ps2_scancode
	call scancode_to_keystroke

	; move
	call move

	jp runloop

exit:
	;halt
	jp app_ret


scancode_to_keystroke:
	push hl
	push de
	push bc

	; test only => copy pure scancode into keystroke
	ld de, keystroke
	ld hl, scancode
	ld b, 0
	ld c, 4
	ldir

	pop bc
	pop de
	pop hl
	ret


